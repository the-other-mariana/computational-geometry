def activateCircle(p, h):
    global t
    global q
    global voronoi
    if p.pointer:
        # this is the leaf in t that will disappear when h reaches the circle event height
        g = p.pointer
        if g.parent.parent:
            grandpa = g.parent.parent
            subtree_root = grandpa.parent
            parent = g.parent

            first = parent.value[0]
            sec = grandpa.value[1]
            if first == sec:
                first, sec = grandpa.value[0], parent.value[1]
            new_node = Node([first, sec])

            bro = t.getLeft(g)
            subtree = t.getRightSubtree(g)
            if g.isRightChild():
                bro = t.getRight(g)
                subtree = t.getLeftSubtree(g)
            t.delete_node(g, h)
            isLeft = True
            if grandpa.isRightChild():
                isLeft = False
            t.delete_node(grandpa, h)

            # update links
            if isLeft:
                subtree_root.left_child = new_node
                new_node.parent = subtree_root
                new_node.left_child = bro
                if new_node.left_child:
                    new_node.left_child.parent = new_node

                if subtree:
                    subtree.value[1] = new_node.value[0]
                    if subtree.right_child:
                        subtree.right_child.value[0] = subtree.value[1]

                    new_node.right_child = subtree
                    if new_node.right_child:
                        new_node.right_child.parent = new_node
            else:
                subtree_root.right_child = new_node
                new_node.parent = subtree_root
                new_node.right_child = bro
                if new_node.right_child:
                    new_node.right_child.parent = new_node

                if subtree:
                    subtree.value[1] = new_node.value[0]
                    if subtree.left_child:
                        subtree.left_child.value[0] = subtree.value[1]

                    new_node.left_child = subtree
                    if new_node.left_child:
                        new_node.left_child.parent = new_node

            prev, next = None, None
            if new_node.left_child:
                prev = new_node.left_child
            if new_node.right_child and new_node.right_child.left_child:
                next = new_node.right_child.left_child

            if prev and prev.pointer == g:
                q.delete(prev)
            if next and next.pointer == g:
                q.delete(next)

            # mark the center of the circle as a vertex of the voronoi
            voronoi.append(p.center)

            # check further triples
            ncenter = new_node.left_child
            if not ncenter.isLeaf():
                ncenter = new_node.right_child
            nleft = t.getLeft(ncenter)
            nright = t.getRight(ncenter)
            if nleft and ncenter and nright:
                e = checkCircleEvent(nleft, ncenter, nright, h)
                if e:
                    q.push(e)
                leftleft = t.getLeft(nleft)
                if leftleft:
                    # e = checkCircleEvent(leftleft, nleft, nright, h)
                    e = checkCircleEvent(leftleft, nleft, ncenter, h)
                    if e:
                        q.push(e)
                rightright = t.getRight(nright)
                if rightright:
                    # e = checkCircleEvent(nleft, nright, rightright, h)
                    e = checkCircleEvent(ncenter, nright, rightright, h)
                    if e:
                        q.push(e)